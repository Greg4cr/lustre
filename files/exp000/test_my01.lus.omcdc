const TOKEN_INIT_STATE : subrange[-2,0] of int = -2;
const TOKEN_ERROR_STATE : subrange[-2,0] of int = -1;
const TOKEN_OUTPUT_STATE : subrange[-2,0] of int = 0;

node NonInlined(in_1: bool; in_2: bool; in_3: bool;
	token_init:bool)
returns(out: bool);

var
  expr: bool;
	in_1_COMB_USED_BY_expr: bool;
	in_1_AT_expr_NONMASKED_TRUE: bool;
	in_1_AT_expr_NONMASKED_FALSE: bool;
	omcdc_0: bool;
	omcdc_1: bool;
	in_2_COMB_USED_BY_expr: bool;
	in_2_AT_expr_NONMASKED_TRUE: bool;
	in_2_AT_expr_NONMASKED_FALSE: bool;
	omcdc_2: bool;
	omcdc_3: bool;
	expr_COMB_USED_BY_out: bool;
	expr_AT_out_NONMASKED_TRUE: bool;
	expr_AT_out_NONMASKED_FALSE: bool;
	omcdc_4: bool;
	omcdc_5: bool;
	in_3_COMB_USED_BY_out: bool;
	in_3_AT_out_NONMASKED_TRUE: bool;
	in_3_AT_out_NONMASKED_FALSE: bool;
	omcdc_6: bool;
	omcdc_7: bool;
	in_1_COMB_OBSERVED: bool;
	in_3_COMB_OBSERVED: bool;
	in_2_COMB_OBSERVED: bool;
	expr_COMB_OBSERVED: bool;
	out_COMB_OBSERVED: bool;
	in_1_TRUE_AT_expr_AFFECTING_AT_CAPTURE: bool;
	in_1_FALSE_AT_expr_AFFECTING_AT_CAPTURE: bool;
	in_2_TRUE_AT_expr_AFFECTING_AT_CAPTURE: bool;
	in_2_FALSE_AT_expr_AFFECTING_AT_CAPTURE: bool;
	expr_TRUE_AT_out_AFFECTING_AT_CAPTURE: bool;
	expr_FALSE_AT_out_AFFECTING_AT_CAPTURE: bool;
	in_3_TRUE_AT_out_AFFECTING_AT_CAPTURE: bool;
	in_3_FALSE_AT_out_AFFECTING_AT_CAPTURE: bool;
	token: subrange[-2,0] of int;
	token_first: subrange[-2,0] of int;
	token_next: subrange[-2,0] of int;
let

	expr = in_1 or in_2;

	/*"Used By" Equations */
	in_1_COMB_USED_BY_expr = (not (in_2));
	in_1_AT_expr_NONMASKED_TRUE = (in_1 and ((not (in_2))));
	in_1_AT_expr_NONMASKED_FALSE = ((not in_1) and ((not (in_2))));
	in_2_COMB_USED_BY_expr = (not (in_1));
	in_2_AT_expr_NONMASKED_TRUE = (in_2 and ((not (in_1))));
	in_2_AT_expr_NONMASKED_FALSE = ((not in_2) and ((not (in_1))));

	out = expr and in_3;

	/*"Used By" Equations */
	expr_COMB_USED_BY_out = in_3;
	expr_AT_out_NONMASKED_TRUE = (expr and (in_3));
	expr_AT_out_NONMASKED_FALSE = ((not expr) and (in_3));
	in_3_COMB_USED_BY_out = expr;
	in_3_AT_out_NONMASKED_TRUE = (in_3 and (expr));
	in_3_AT_out_NONMASKED_FALSE = ((not in_3) and (expr));

	/* comb_observed equations */
	in_1_COMB_OBSERVED = (in_1_COMB_USED_BY_expr and expr_COMB_OBSERVED);
	in_3_COMB_OBSERVED = (in_3_COMB_USED_BY_out and out_COMB_OBSERVED);
	in_2_COMB_OBSERVED = (in_2_COMB_USED_BY_expr and expr_COMB_OBSERVED);
	expr_COMB_OBSERVED = (expr_COMB_USED_BY_out and out_COMB_OBSERVED);
	out_COMB_OBSERVED = true;

	/* Affecting at capture equations */
	in_1_TRUE_AT_expr_AFFECTING_AT_CAPTURE = (in_1_AT_expr_NONMASKED_TRUE and false) -> ((in_1_AT_expr_NONMASKED_TRUE and false) or pre in_1_TRUE_AT_expr_AFFECTING_AT_CAPTURE);
	in_1_FALSE_AT_expr_AFFECTING_AT_CAPTURE = (in_1_AT_expr_NONMASKED_FALSE and false) -> ((in_1_AT_expr_NONMASKED_FALSE and false) or pre in_1_FALSE_AT_expr_AFFECTING_AT_CAPTURE);
	in_2_TRUE_AT_expr_AFFECTING_AT_CAPTURE = (in_2_AT_expr_NONMASKED_TRUE and false) -> ((in_2_AT_expr_NONMASKED_TRUE and false) or pre in_2_TRUE_AT_expr_AFFECTING_AT_CAPTURE);
	in_2_FALSE_AT_expr_AFFECTING_AT_CAPTURE = (in_2_AT_expr_NONMASKED_FALSE and false) -> ((in_2_AT_expr_NONMASKED_FALSE and false) or pre in_2_FALSE_AT_expr_AFFECTING_AT_CAPTURE);
	expr_TRUE_AT_out_AFFECTING_AT_CAPTURE = (expr_AT_out_NONMASKED_TRUE and false) -> ((expr_AT_out_NONMASKED_TRUE and false) or pre expr_TRUE_AT_out_AFFECTING_AT_CAPTURE);
	expr_FALSE_AT_out_AFFECTING_AT_CAPTURE = (expr_AT_out_NONMASKED_FALSE and false) -> ((expr_AT_out_NONMASKED_FALSE and false) or pre expr_FALSE_AT_out_AFFECTING_AT_CAPTURE);
	in_3_TRUE_AT_out_AFFECTING_AT_CAPTURE = (in_3_AT_out_NONMASKED_TRUE and false) -> ((in_3_AT_out_NONMASKED_TRUE and false) or pre in_3_TRUE_AT_out_AFFECTING_AT_CAPTURE);
	in_3_FALSE_AT_out_AFFECTING_AT_CAPTURE = (in_3_AT_out_NONMASKED_FALSE and false) -> ((in_3_AT_out_NONMASKED_FALSE and false) or pre in_3_FALSE_AT_out_AFFECTING_AT_CAPTURE);

	/* Token code */
	token_first = if (token_init) then TOKEN_ERROR_STATE else TOKEN_INIT_STATE;
	token_next =
		if (pre(token) = TOKEN_INIT_STATE) then token_first
		else (if (pre(token) = TOKEN_ERROR_STATE) then TOKEN_ERROR_STATE
		else (if (pre(token) = TOKEN_OUTPUT_STATE) then TOKEN_OUTPUT_STATE
		else TOKEN_ERROR_STATE));
	token = token_first -> token_next;

	/* Check properties */
/* Obligations for statement expr on line 9 of the original program. */
	omcdc_0 = not ((in_1_AT_expr_NONMASKED_TRUE and expr_COMB_OBSERVED) or (in_1_TRUE_AT_expr_AFFECTING_AT_CAPTURE and token=TOKEN_OUTPUT_STATE));
	--%PROPERTY omcdc_0;
	omcdc_1 = not ((in_1_AT_expr_NONMASKED_FALSE and expr_COMB_OBSERVED) or (in_1_FALSE_AT_expr_AFFECTING_AT_CAPTURE and token=TOKEN_OUTPUT_STATE));
	--%PROPERTY omcdc_1;
	omcdc_2 = not ((in_2_AT_expr_NONMASKED_TRUE and expr_COMB_OBSERVED) or (in_2_TRUE_AT_expr_AFFECTING_AT_CAPTURE and token=TOKEN_OUTPUT_STATE));
	--%PROPERTY omcdc_2;
	omcdc_3 = not ((in_2_AT_expr_NONMASKED_FALSE and expr_COMB_OBSERVED) or (in_2_FALSE_AT_expr_AFFECTING_AT_CAPTURE and token=TOKEN_OUTPUT_STATE));
	--%PROPERTY omcdc_3;
/* Obligations for statement out on line 10 of the original program. */
	omcdc_4 = not ((expr_AT_out_NONMASKED_TRUE and out_COMB_OBSERVED) or (expr_TRUE_AT_out_AFFECTING_AT_CAPTURE and token=TOKEN_OUTPUT_STATE));
	--%PROPERTY omcdc_4;
	omcdc_5 = not ((expr_AT_out_NONMASKED_FALSE and out_COMB_OBSERVED) or (expr_FALSE_AT_out_AFFECTING_AT_CAPTURE and token=TOKEN_OUTPUT_STATE));
	--%PROPERTY omcdc_5;
	omcdc_6 = not ((in_3_AT_out_NONMASKED_TRUE and out_COMB_OBSERVED) or (in_3_TRUE_AT_out_AFFECTING_AT_CAPTURE and token=TOKEN_OUTPUT_STATE));
	--%PROPERTY omcdc_6;
	omcdc_7 = not ((in_3_AT_out_NONMASKED_FALSE and out_COMB_OBSERVED) or (in_3_FALSE_AT_out_AFFECTING_AT_CAPTURE and token=TOKEN_OUTPUT_STATE));
	--%PROPERTY omcdc_7;
tel;
