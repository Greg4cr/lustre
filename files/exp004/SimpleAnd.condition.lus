node SimpleAnd(
  A : bool;
  B : bool;
  C : bool
) returns (
  E : bool
);
var
  D : bool;
  A_TRUE_AT_D_CONDITION_TRUE_0 : bool;
  A_FALSE_AT_D_CONDITION_FALSE_1 : bool;
  B_TRUE_AT_D_CONDITION_TRUE_2 : bool;
  B_FALSE_AT_D_CONDITION_FALSE_3 : bool;
  D_TRUE_AT_E_CONDITION_TRUE_4 : bool;
  D_FALSE_AT_E_CONDITION_FALSE_5 : bool;
  C_TRUE_AT_E_CONDITION_TRUE_6 : bool;
  C_FALSE_AT_E_CONDITION_FALSE_7 : bool;
let
  --%MAIN;
  D = (A or B);

  E = (D and C);

  A_TRUE_AT_D_CONDITION_TRUE_0 = (not A);

  A_FALSE_AT_D_CONDITION_FALSE_1 = (not (not A));

  B_TRUE_AT_D_CONDITION_TRUE_2 = (not B);

  B_FALSE_AT_D_CONDITION_FALSE_3 = (not (not B));

  D_TRUE_AT_E_CONDITION_TRUE_4 = (not D);

  D_FALSE_AT_E_CONDITION_FALSE_5 = (not (not D));

  C_TRUE_AT_E_CONDITION_TRUE_6 = (not C);

  C_FALSE_AT_E_CONDITION_FALSE_7 = (not (not C));

  --%PROPERTY A_TRUE_AT_D_CONDITION_TRUE_0;
  --%PROPERTY A_FALSE_AT_D_CONDITION_FALSE_1;
  --%PROPERTY B_TRUE_AT_D_CONDITION_TRUE_2;
  --%PROPERTY B_FALSE_AT_D_CONDITION_FALSE_3;
  --%PROPERTY D_TRUE_AT_E_CONDITION_TRUE_4;
  --%PROPERTY D_FALSE_AT_E_CONDITION_FALSE_5;
  --%PROPERTY C_TRUE_AT_E_CONDITION_TRUE_6;
  --%PROPERTY C_FALSE_AT_E_CONDITION_FALSE_7;

tel;
